name: (Self-Service) Secret Management Workflow

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform (create or update)'
        required: true
        type: choice
        options:
          - create
          - update
      environment:
        description: 'Select Environment'
        required: true
        type: choice
        options:
          - production
          - staging
          - sandbox
      secret_category:
        description: 'Select Secret Category'
        required: true
        type: choice
        options:
          - customer-experience
          - infra
          - lending
      service:
        description: 'Name of the service (secret file name without extension)'
        required: true
      secret_type:
        description: 'Type of the secret (cert or singleline)'
        required: true
        default: 'singleline'
      secret_key:
        description: 'Secret key to add or update'
        required: true
      secret_value:
        description: 'Secret value for the key'
        required: true
      jira_ticket_id:
        description: 'JIRA Ticket ID'
        required: true
      secret_manager:
        description: 'Vault or AWS Secret Manager(TODO) '
        required: true
        type: choice
        default: vault
        options:
          - vault
          - secretmanager
# DISABLED: INPUT PARAMETERS
      # sops_version:
      #   description: 'SOPS configuration version (v1 or v2)'
      #   required: true
      #   type: choice
      #   options:
      #     - v1
      #     - v2
      # logLevel:
      #   description: 'Log level'
      #   required: true
      #   default: 'warning'
      #   type: choice
      #   options:
      #     - info
      #     - warning
      #     - debug

jobs:
  check-branch:
    runs-on: ubuntu-latest
    steps:
      - name: Check branch
        if: github.ref != 'refs/heads/main'
        run: |
          echo "This workflow is only allowed to run on the main branch."
          exit 1
  process-secret-file:
    needs: [check-branch]
    name: Processing --> JIRA ${{ github.event.inputs.jira_ticket_id }}
    runs-on: self-hosted-${{ github.event.inputs.environment }}
    environment: ${{ github.event.inputs.environment }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.x'

      - name: Install dependency tools
        run: |
          sudo apt-get update
          sudo apt-get install -y wget git gh
          python -m pip install --upgrade pip

      # Export AGE Key
      - name: Set COMMON_AGE_KEY
        run: |
          AGE_KEY_FILE="sops-age-key.txt"
          echo "${{ secrets.COMMON_AGE_KEY }}" > "$AGE_KEY_FILE"
          echo "SOPS_AGE_KEY_FILE=$AGE_KEY_FILE" >> $GITHUB_ENV

      # Import Generic PGP Keys (Private and Public)
      - name: Import Generic & svc-git-infra-read PGP Keys
        run: |
          echo "Importing Generic PGP private key..."
          echo "${{ secrets.CI_PGP_PRIVATE_KEY }}" | gpg --batch --no-tty --import 2>&1
          echo "Importing Generic PGP public key..."
          echo "${{ secrets.CI_PGP_PUBLIC_KEY }}" | gpg --import 2>&1
          echo "Importing svc-git-infra-read PGP private key..."
          echo "${{ secrets.SVC_GIT_INFRA_READ_PGP_PRIVATE_KEY }}" | gpg --batch --no-tty --import 2>&1
          echo "Importing svc-git-infra-read PGP public key..."
          echo "${{ secrets.SVC_GIT_INFRA_READ_PGP_PUBLIC_KEY }}" | gpg --import 2>&1

      # Import Generic PGP Keys (Private and Public)
      - name: Import PGP Keys and Capture Fingerprint for ${{ github.event.inputs.environment }} environment
        run: |
          import_and_extract_fingerprint() {
            PRIVATE_KEY="$1"
            PUBLIC_KEY="$2"
            echo "Importing PGP private key..."
            echo "$PRIVATE_KEY" | gpg --batch --no-tty --import 2>&1
            gpg_error=$?

            if [ $gpg_error -ne 0 ]; then
              echo "Failed to import PGP private key, error code: $gpg_error"
              exit $gpg_error
            fi

            echo "Importing PGP public key..."
            echo "$PUBLIC_KEY" | gpg --import 2>&1
            gpg_error=$?

            if [ $gpg_error -ne 0 ]; then
              echo "Failed to import PGP public key, error code: $gpg_error"
              exit $gpg_error
            fi

            echo "Listing imported keys..."
            gpg --list-keys
            gpg --list-secret-keys

            echo "Extracting fingerprint..."
            FINGERPRINT=$(gpg --list-secret-keys --with-colons | grep '^fpr' | head -n 1 | cut -d':' -f10)

            if [ -z "$FINGERPRINT" ]; then
              echo "Failed to extract fingerprint"
              exit 1
            fi

            echo "Fingerprint extracted: $FINGERPRINT"
            echo "FINGERPRINT=$FINGERPRINT" >> $GITHUB_ENV
          }

          # Use the environment variables
          case "${{ github.event.inputs.environment }}" in
            "sandbox")
              import_and_extract_fingerprint "${{ secrets.SANDBOX_PGP_PRIVATE_KEY }}" "${{ secrets.SANDBOX_PGP_PUBLIC_KEY }}"
              ;;
            "staging")
              import_and_extract_fingerprint "${{ secrets.STAGING_PGP_PRIVATE_KEY }}" "${{ secrets.STAGING_PGP_PUBLIC_KEY }}"
              ;;
            "production")
              import_and_extract_fingerprint "${{ secrets.PRODUCTION_PGP_PRIVATE_KEY }}" "${{ secrets.PRODUCTION_PGP_PUBLIC_KEY }}"
              ;;
            *)
              echo "::error ::Invalid secret category."
              exit 1
              ;;
          esac

      - name: Install sops
        run: |
          wget https://github.com/mozilla/sops/releases/download/v3.8.0/sops_3.8.0_amd64.deb
          sudo dpkg -i sops_3.8.0_amd64.deb

      - name: Handle Secret Value
        run: |
          INP_SECRET_VALUE=$(jq -r '.inputs.secret_value' $GITHUB_EVENT_PATH)
          echo "::add-mask::$INP_SECRET_VALUE"
          echo SECRET_VALUE="$INP_SECRET_VALUE" >> $GITHUB_ENV

      - name: Define Secret File Path
        run: |
          echo "SECRET_FILE_PATH=secrets/${{ github.event.inputs.environment }}/${{ github.event.inputs.secret_category }}/${{ github.event.inputs.service }}.yaml" >> $GITHUB_ENV

      - name: Check if Secret File Exists or Create New
        run: |
          if [ "${{ github.event.inputs.action }}" == "create" ]; then
            if [ -f "${{ env.SECRET_FILE_PATH }}" ]; then
              echo "::error::Secret file already exists for the service. Cannot create a new one."
              exit 1
            fi
            echo "::notice::Creating new secret file for the new service."
            mkdir -p "$(dirname ${{ env.SECRET_FILE_PATH }})"
            echo "${{ github.event.inputs.secret_key }}: " > "${{ env.SECRET_FILE_PATH }}"
            echo "isNewFile=true" >> $GITHUB_ENV
          elif [ "${{ github.event.inputs.action }}" == "update" ]; then
            if [ ! -f "${{ env.SECRET_FILE_PATH }}" ]; then
              echo "::error::Secret file does not exist. Cannot update non-existent file."
              exit 1
            fi
            echo "::notice::Updating secret for the existing service."
            echo "isNewFile=false" >> $GITHUB_ENV
          else
            echo "::error::Invalid action specified."
            exit 1
          fi

      - name: Define Temporary Decrypted File Path
        run: |
          DECRYPTED_FILE_PATH="$(dirname ${{ env.SECRET_FILE_PATH }})/temp_decrypted_file.yaml"
          echo "DECRYPTED_FILE_PATH=$DECRYPTED_FILE_PATH" >> $GITHUB_ENV

      - name: Decrypt Secret File or Skip If New
        if: env.isNewFile == 'false'
        run: |
          echo "::notice::Decrypting existing secret file."
          sops --config configs/v1_sops.yaml --decrypt "${{ env.SECRET_FILE_PATH }}" > "${{ env.DECRYPTED_FILE_PATH }}"

      - name: Update Secret File Based on Secret Type
        run: |
          KEY="${{ github.event.inputs.secret_key }}"
          SECRET_TYPE="${{ github.event.inputs.secret_type }}"
          ACTION="${{ github.event.inputs.action }}"
          DECRYPTED_FILE_PATH="${{ env.DECRYPTED_FILE_PATH }}"
          SECRET_VALUE="${{ env.SECRET_VALUE }}"

          # Check if the key already exists in the file
          if grep -q "^$KEY:" "$DECRYPTED_FILE_PATH"; then
            if [ "$ACTION" == "update" ]; then
              echo "Key $KEY exists. Updating its value."
              if [ "$SECRET_TYPE" == "cert" ]; then
                # Replace the existing key-value with the new value
                sed -i "/^$KEY:/,/^\S/!d; /^$KEY:/a $(echo "$SECRET_VALUE" | base64 --decode | sed 's/^/    /')" "$DECRYPTED_FILE_PATH"
              else
                # Replace the existing single-line secret
                sed -i "s/^$KEY:.*/$KEY: $SECRET_VALUE/" "$DECRYPTED_FILE_PATH"
              fi
            else
              echo "Key $KEY already exists and action is not update. Skipping."
            fi
          else
            echo "Key $KEY does not exist. Adding it to the file."
            if [ "$SECRET_TYPE" == "cert" ]; then
              # Append the new key-value pair as a multi-line string with indentation
              echo "$KEY: |" >> "$DECRYPTED_FILE_PATH"
              echo "$SECRET_VALUE" | base64 --decode | sed 's/^/    /' >> "$DECRYPTED_FILE_PATH"
            else
              # Append the new single-line secret
              echo "$KEY: $SECRET_VALUE" >> "$DECRYPTED_FILE_PATH"
            fi
          fi

      - name: Re-Encrypt Secret File
        run: |
          sops --config configs/v1_sops.yaml --encrypt "${{ env.DECRYPTED_FILE_PATH }}" > "${{ env.SECRET_FILE_PATH }}"

      - name: Delete Existing Branch
        run: |
          BRANCH="secret/${{ github.event.inputs.service }}/${{ github.event.inputs.jira_ticket_id }}"
          EXISTS=$(git ls-remote --heads origin $BRANCH)
          if [ -z "$EXISTS" ]; then
            echo "Branch $BRANCH does not exist on remote. Skipping deletion."
          else
            echo "Deleting existing remote branch $BRANCH."
            git push origin --delete $BRANCH
          fi

      - name: Commit and Push Changes
        run: |
          git config --global user.name 'svc-git-infra-read'
          git config --global user.email 'earnest-infra-services@earnest.com'
          BRANCH="secret/${{ github.event.inputs.service }}/${{ github.event.inputs.jira_ticket_id }}"
          git checkout -b "$BRANCH"
          git add "${{ env.SECRET_FILE_PATH }}"
          if [ "${{ github.event.inputs.action }}" == "create" ]; then
            COMMIT_MESSAGE="Create new secret for new service: ${{ github.event.inputs.service }} related to JIRA ${{ github.event.inputs.jira_ticket_id }}"
          else
            COMMIT_MESSAGE="Update secret for existing service: ${{ github.event.inputs.service }} related to JIRA ${{ github.event.inputs.jira_ticket_id }}"
          fi
          git commit -m "$COMMIT_MESSAGE"
          git push --set-upstream origin "$BRANCH"

      - name: Create Pull Request
        run: |
          SERVICE="${{ github.event.inputs.service }}"
          JIRA_TICKET_ID="${{ github.event.inputs.jira_ticket_id }}"
          ACTION="${{ github.event.inputs.action }}"
          BRANCH="secret/$SERVICE/$JIRA_TICKET_ID"

          if [ "$ACTION" == "create" ]; then
            PR_TITLE="New Secret Creation: $SERVICE for JIRA $JIRA_TICKET_ID"
            CHANGE_DETAILS="Creating a new secret for the new service: $SERVICE related to JIRA $JIRA_TICKET_ID"
          else
            PR_TITLE="Secret Update: $SERVICE for JIRA $JIRA_TICKET_ID"
            CHANGE_DETAILS="Updating the secret for the existing service: $SERVICE related to JIRA $JIRA_TICKET_ID"
          fi

          # Construct PR_BODY using echo and command substitution
          PR_BODY=$(echo -e "## Changes\n- $CHANGE_DETAILS\n\n### References\nhttps://meetearnest.atlassian.net/browse/$JIRA_TICKET_ID")

          gh pr create --title "$PR_TITLE" \
                      --body "$PR_BODY" \
                      --base main \
                      --head "$BRANCH" \
                      --label "self-service-automation"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Cleanup
        run: |
          rm -f "${{ env.DECRYPTED_FILE_PATH }}"
          gpg --delete-secret-keys --batch --yes ${{ env.FINGERPRINT }}
          rm -f "$SECRET_TEMP_FILE"
          rm -f age_key.txt

        # Additional steps to commit changes, if necessary