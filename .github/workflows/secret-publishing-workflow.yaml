name: (Pull Request) Secret Publishing Workflow

on:
  pull_request:
    branches: [ "main","develop","feature/*", "secret/*", "gh-action/*"]
    paths:
      - "secrets/**"
  push:
    branches: [ "main","develop","feature/*", "secret/*", "gh-action/*"]
  workflow_dispatch:

jobs:
  # setting up prerequisites, performing initial checks, or preparing the environment
  pre_job:
    if: github.actor != 'svc-git-infra-read'
    name: Checking duplicate GH Action
    runs-on: self-hosted
    outputs:
      should_skip: ${{ steps.skip_check.outputs.should_skip }}
    steps:
      - id: skip_check
        uses: fkirc/skip-duplicate-actions@v5.3.1
        with:
          skip_after_successful_duplicate: 'true'
  # detecting and preventing the leakage of sensitive information
  gitleaks:
    if: github.actor != 'svc-git-infra-read'
    needs: [pre_job]
    name: Scanning secrets via Gitleaks
    runs-on: ubuntu-latest #self-hosted -> https://github.com/gitleaks/gitleaks-action/issues/125
    environment:
      name: system
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v4.0.1
        with:
          node-version: 18
          check-latest: true
      - run: wget -O .gitleaks.toml https://raw.githubusercontent.com/zricethezav/gitleaks/master/config/gitleaks.toml
      - uses: gitleaks/gitleaks-action@v2.3.4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE_KEY}} # Only required for Organizations, not personal accounts.
          GITLEAKS_ENABLE_SUMMARY: true
          GITLEAKS_VERSION: latest
      - name: Save success status
        if: ${{ success() }}
        run: echo "success" > status.txt
      - name: Upload status
        uses: actions/upload-artifact@v4
        with:
          name: status
          path: status.txt
  # automates code review feedback from various linters and analyzers in your CI/CD pipeline
  reviewdog:
    if: github.actor != 'svc-git-infra-read'
    needs: [pre_job]
    name: Review Gitleaks
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4
      - uses: reviewdog/action-gitleaks@v1.4.0
        with:
          github_token: ${{ secrets.github_token }}
          # Change reviewdog reporter if you need [github-pr-check,github-check,github-pr-review].
          reporter: github-pr-review
          # Change reporter level if you need.
          # GitHub Status Check won't become failure with warning.
          level: warning
  # secrets injection for vault secret engine v1
  v1_secret_vault:
    # This job runs only on the push event (i.e., after a merge)
    if: github.event_name == 'push'
    needs: [pre_job,reviewdog,gitleaks]
    name: "v1 Secret Injection via Sops"
    strategy:
      matrix:
        environment: [sandbox, staging, production]
      fail-fast: false
    runs-on: self-hosted-${{ matrix.environment }}
    environment: ${{ matrix.environment }} #no longer required

    steps:
      - name: Clean up working directory
        run: rm -rf ./*

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download status
        uses: actions/download-artifact@v4
        with:
          name: status

      - name: Check Gitleaks status
        run: |
          if [[ "$(cat status.txt)" != "success" ]]; then
            echo "Gitleaks check failed. Exiting."
            exit 1s
          fi

      - name: Install GPG
        run: |
          gpg --version
          sudo apt-get update
          sudo apt-get install -y gnupg

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install dependency tools
        run: |
          sudo apt-get update
          sudo apt-get install -y wget git ssh
          python -m pip install --upgrade pip

      # Import Generic PGP Keys (Private and Public)
      - name: Import Generic & svc-git-infra-read PGP Keys
        run: |
          echo "Importing Generic PGP private key..."
          echo "${{ secrets.CI_PGP_PRIVATE_KEY }}" | gpg --batch --no-tty --import 2>&1
          echo "Importing Generic PGP public key..."
          echo "${{ secrets.CI_PGP_PUBLIC_KEY }}" | gpg --import 2>&1
          echo "Importing svc-git-infra-read PGP private key..."
          echo "${{ secrets.SVC_GIT_INFRA_READ_PGP_PRIVATE_KEY }}" | gpg --batch --no-tty --import 2>&1
          echo "Importing svc-git-infra-read PGP public key..."
          echo "${{ secrets.SVC_GIT_INFRA_READ_PGP_PUBLIC_KEY }}" | gpg --import 2>&1

      # Import Generic PGP Keys (Private and Public)
      - name: Import PGP Keys and Capture Fingerprint for ${{ matrix.environment }} environment
        run: |
          import_and_extract_fingerprint() {
            PRIVATE_KEY="$1"
            PUBLIC_KEY="$2"
            echo "Importing PGP private key..."
            echo "$PRIVATE_KEY" | gpg --batch --no-tty --import 2>&1
            gpg_error=$?

            if [ $gpg_error -ne 0 ]; then
              echo "Failed to import PGP private key, error code: $gpg_error"
              exit $gpg_error
            fi

            echo "Importing PGP public key..."
            echo "$PUBLIC_KEY" | gpg --import 2>&1
            gpg_error=$?

            if [ $gpg_error -ne 0 ]; then
              echo "Failed to import PGP public key, error code: $gpg_error"
              exit $gpg_error
            fi

            echo "Listing imported keys..."
            gpg --list-keys
            gpg --list-secret-keys

            echo "Extracting fingerprint..."
            FINGERPRINT=$(gpg --list-secret-keys --with-colons | grep '^fpr' | head -n 1 | cut -d':' -f10)

            if [ -z "$FINGERPRINT" ]; then
              echo "Failed to extract fingerprint"
              exit 1
            fi

            echo "Fingerprint extracted: $FINGERPRINT"
            echo "FINGERPRINT=$FINGERPRINT" >> $GITHUB_ENV
          }

          # Use the environment variables
          case "${{ matrix.environment }}" in
            "sandbox")
              import_and_extract_fingerprint "${{ secrets.SANDBOX_PGP_PRIVATE_KEY }}" "${{ secrets.SANDBOX_PGP_PUBLIC_KEY }}"
              ;;
            "staging")
              import_and_extract_fingerprint "${{ secrets.STAGING_PGP_PRIVATE_KEY }}" "${{ secrets.STAGING_PGP_PUBLIC_KEY }}"
              ;;
            "production")
              import_and_extract_fingerprint "${{ secrets.PRODUCTION_PGP_PRIVATE_KEY }}" "${{ secrets.PRODUCTION_PGP_PUBLIC_KEY }}"
              ;;
            *)
              echo "::error ::Invalid secret category."
              exit 1
              ;;
          esac

      # Export AGE Key
      - name: Set COMMON_AGE_KEY
        run: |
          AGE_KEY_FILE="sops-age-key.txt"
          echo "${{ secrets.COMMON_AGE_KEY }}" > "$AGE_KEY_FILE"
          echo "SOPS_AGE_KEY_FILE=$AGE_KEY_FILE" >> $GITHUB_ENV

      - name: Configure Git for GPG
        run: |
          git config --global user.signingkey 9B0444DF26E34586
          git config --global commit.gpgsign true

      - name: Copy v1_sops.yaml
        run: cp -f configs/v1_sops.yaml .sops.yaml

      - name: Set up SSH Agent
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SVC_GIT_INFRA_READ_SSH_PRIVATE_KEY }}

      - name: Add GitHub.com to known hosts
        run: ssh-keyscan github.com >> ~/.ssh/known_hosts

      - name: Install sops
        run: |
          wget https://github.com/mozilla/sops/releases/download/v3.8.0/sops_3.8.0_amd64.deb
          sudo dpkg -i sops_3.8.0_amd64.deb

      - name: Verify sops installation
        run: sops --version

      # - name: Get All Changed Files
      #   id: files
      #   with:
      #     format: 'yaml'
      #   uses: jitterbit/get-changed-files@v1

      - name: Get changed files in the secrets folder
        id: files
        uses: tj-actions/changed-files@v42
        with:
          files: secrets/**/*.{yaml,yml}  # Targeting specific files in the secrets directory
          files_ignore: secrets/CODEOWNERS  # Ignoring the CODEOWNERS file in the secrets directory

      - name: Check for Relevant Changes
        id: check_changes
        run: |
          IFS=' ' read -r -a modified_files <<< "${{ steps.files.outputs.all_changed_files }}"
          relevant_changes="false"
          for file in "${modified_files[@]}"; do
            # Extract the folder name from the file path
            path_components=(${file//\// })
            folder_name=${path_components[2]}  # Adjust based on your directory structure

            if [[ $file == secrets/${{ matrix.environment }}/$folder_name/* ]]; then
              relevant_changes="true"
              break
            fi
          done
          echo "RELEVANT_CHANGES=$relevant_changes" >> $GITHUB_ENV

      # Set environment variables based on the matrix environment
      - if: env.RELEVANT_CHANGES == 'true'
        name: Set environment variables for ${{ matrix.environment }} environment
        run: |
          case ${{ matrix.environment }} in
            sandbox)
              VAULT_ADDR="${{ secrets.SANDBOX_VAULT_ADDR }}"
              VAULT_TOKEN="${{ secrets.SANDBOX_VAULT_TOKEN }}"
              ;;
            staging)
              VAULT_ADDR="${{ secrets.STAGING_VAULT_ADDR }}"
              VAULT_TOKEN="${{ secrets.STAGING_VAULT_TOKEN }}"
              ;;
            production)
              VAULT_ADDR="${{ secrets.PRODUCTION_VAULT_ADDR }}"
              VAULT_TOKEN="${{ secrets.PRODUCTION_VAULT_TOKEN }}"
              ;;
            *)
              echo "Unsupported environment: ${{ matrix.environment }}"
              exit 1
              ;;
          esac
          echo "VAULT_ADDR=$VAULT_ADDR" >> $GITHUB_ENV
          echo "VAULT_TOKEN=$VAULT_TOKEN" >> $GITHUB_ENV

      - if: env.RELEVANT_CHANGES == 'true'
        name: Decrypt Double-Dotted Secret Files
        run: |
          set -e
          IFS=' ' read -r -a modified_files <<< "${{ steps.files.outputs.all_changed_files }}"
          for file in "${modified_files[@]}"; do
            if [[ $(basename "$file") =~ \..+\.yaml$ ]]; then
              # Extract the folder name from the file path
              path_components=(${file//\// })
              folder_name=${path_components[2]}  # Adjust based on your directory structure

              decrypted_directory="secrets/${{ matrix.environment }}/$folder_name/decrypted"
              mkdir -p "$decrypted_directory"
              decrypted_file_path="$decrypted_directory/$(basename $file)"
              flag_file_path="$decrypted_directory/$(basename $file).decrypted"

              echo "Decrypting double-dot file: $file"
              if sops --config configs/v1_sops.yaml --decrypt $file > $decrypted_file_path; then
                # Create a flag file to indicate successful decryption
                touch "$flag_file_path"
              fi
            fi
          done

      - if: env.RELEVANT_CHANGES == 'true'
        name: Check for Divergent Branches and Update if Necessary
        run: |
          set -e
          # Fetch the latest main branch
          git fetch origin main

          # Check if current branch is divergent from the main branch
          if git merge-base --is-ancestor main HEAD; then
            echo "Current branch is not divergent from main."
          else
            echo "Branch is divergent. Proceeding with pull and update."
            git pull origin main --rebase
          fi

      # This is a one time only run to perform sops updatekeys using config: configs/v1_sops.yaml
      - if: env.RELEVANT_CHANGES == 'true'
        name: Process and Update Keys in Secret Files
        run: |
          set -e
          IFS=' ' read -r -a modified_files <<< "${{ steps.files.outputs.all_changed_files }}"
          FILES_TO_COMMIT=()

          for file in "${modified_files[@]}"; do
            # Extract the folder name from the file path
            path_components=(${file//\// })
            folder_name=${path_components[2]}  # Adjust based on your directory structure

            if [[ $file == secrets/${{ matrix.environment }}/$folder_name/* ]]; then
              # Update the keys in the file
              yes | sops --config configs/v2_sops.yaml updatekeys "$file"

              # Add the file to the list to be committed
              FILES_TO_COMMIT+=("$file")
            fi
          done

          if [ ${#FILES_TO_COMMIT[@]} -gt 0 ]; then
            git config --global user.name 'svc-git-infra-read'
            git config --global user.email 'earnest-infra-services@earnest.com'

            # Stage the files for commit
            git add "${FILES_TO_COMMIT[@]}"

            # Check if there are changes to be committed
            if git diff --staged --quiet; then
              echo "No changes in the files to commit."
            else
              git commit -m "Updated keys in modified secret files"

              # Set the pull strategy to 'merge' for this operation
              git config pull.rebase false

              # Pull the latest changes from the remote branch
              git pull origin main || (echo "Failed to pull changes from origin main" && exit 1)

              # Use SSH for pushing
              git push git@github.com:meetearnest/infra-secrets.git HEAD:main || (echo "Failed to push changes to origin main" && exit 1)
            fi
          else
            echo "No files to commit."
          fi

      - if: env.RELEVANT_CHANGES == 'true'
        name: Process Secret Files
        run: |
          set -e
          IFS=' ' read -r -a modified_files <<< "${{ steps.files.outputs.all_changed_files }}"
          for file in "${modified_files[@]}"; do
            if [[ $file == secrets/${{ matrix.environment }}/* ]]; then
              # Extract the folder name from the file path
              path_components=(${file//\// })
              folder_name=${path_components[2]}  # Adjust based on your directory structure

              decrypted_directory="secrets/${{ matrix.environment }}/$folder_name/decrypted"  # Update as needed
              decrypted_file_path="$decrypted_directory/$(basename $file)"
              flag_file_path="$decrypted_directory/$(basename $file).decrypted"

              if [[ -f "$flag_file_path" ]]; then
                # Process decrypted file
                echo "Processing decrypted file: $decrypted_file_path"

                # Convert YAML to JSON using yq
                pip install yq
                yq -r . "$decrypted_file_path" > "${decrypted_file_path%.yaml}.json"

                # Debug output the contents of the JSON file for debugging
                # echo "Converted JSON content:"
                # cat "${decrypted_file_path%.yaml}.json"

                # Construct the Vault path
                filename_without_extension="$(basename $decrypted_file_path .yaml)"
                IFS='.' read -r secret_name sub_path <<< "$filename_without_extension"
                vault_path="secret/$secret_name/$sub_path"
                echo "Uploading to Vault at path: $vault_path"

                # Upload to Vault
                curl -H "X-Vault-Token: $VAULT_TOKEN" \
                      -H "Content-Type: application/json" \
                      --request POST \
                      --data @"${decrypted_file_path%.yaml}.json" \
                      $VAULT_ADDR/v1/$vault_path
              else
                # File not decrypted, use sops publish
                echo "Publishing secret using sops for file: $file"
                sops publish -y $file
              fi
            fi
          done
  # secrets injection for vault secret engine v2
  v2_secret_vault:
    # This job runs only on the push event (i.e., after a merge)
    if: github.event_name == 'push'
    needs: [pre_job,reviewdog,gitleaks]
    name: "v2 Secret Injection via Sops"
    strategy:
      matrix:
        environment: [sandbox, staging, production]
      fail-fast: false
    runs-on: self-hosted-${{ matrix.environment }}
    environment: ${{ matrix.environment }} #no longer required

    steps:
      - name: Clean up working directory
        run: rm -rf ./*

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download status
        uses: actions/download-artifact@v4
        with:
          name: status

      - name: Check Gitleaks status
        run: |
          if [[ "$(cat status.txt)" != "success" ]]; then
            echo "Gitleaks check failed. Exiting."
            exit 1s
          fi

      - name: Install GPG
        run: |
          gpg --version
          sudo apt-get update
          sudo apt-get install -y gnupg

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install dependency tools
        run: |
          sudo apt-get update
          sudo apt-get install -y wget git ssh
          python -m pip install --upgrade pip

      # Import Generic PGP Keys (Private and Public)
      - name: Import Generic & svc-git-infra-read PGP Keys
        run: |
          echo "Importing Generic PGP private key..."
          echo "${{ secrets.CI_PGP_PRIVATE_KEY }}" | gpg --batch --no-tty --import 2>&1
          echo "Importing Generic PGP public key..."
          echo "${{ secrets.CI_PGP_PUBLIC_KEY }}" | gpg --import 2>&1
          echo "Importing svc-git-infra-read PGP private key..."
          echo "${{ secrets.SVC_GIT_INFRA_READ_PGP_PRIVATE_KEY }}" | gpg --batch --no-tty --import 2>&1
          echo "Importing svc-git-infra-read PGP public key..."
          echo "${{ secrets.SVC_GIT_INFRA_READ_PGP_PUBLIC_KEY }}" | gpg --import 2>&1

      # Import Generic PGP Keys (Private and Public)
      - name: Import PGP Keys and Capture Fingerprint for ${{ matrix.environment }} environment
        run: |
          import_and_extract_fingerprint() {
            PRIVATE_KEY="$1"
            PUBLIC_KEY="$2"
            echo "Importing PGP private key..."
            echo "$PRIVATE_KEY" | gpg --batch --no-tty --import 2>&1
            gpg_error=$?

            if [ $gpg_error -ne 0 ]; then
              echo "Failed to import PGP private key, error code: $gpg_error"
              exit $gpg_error
            fi

            echo "Importing PGP public key..."
            echo "$PUBLIC_KEY" | gpg --import 2>&1
            gpg_error=$?

            if [ $gpg_error -ne 0 ]; then
              echo "Failed to import PGP public key, error code: $gpg_error"
              exit $gpg_error
            fi

            echo "Listing imported keys..."
            gpg --list-keys
            gpg --list-secret-keys

            echo "Extracting fingerprint..."
            FINGERPRINT=$(gpg --list-secret-keys --with-colons | grep '^fpr' | head -n 1 | cut -d':' -f10)

            if [ -z "$FINGERPRINT" ]; then
              echo "Failed to extract fingerprint"
              exit 1
            fi

            echo "Fingerprint extracted: $FINGERPRINT"
            echo "FINGERPRINT=$FINGERPRINT" >> $GITHUB_ENV
          }

          # Use the environment variables
          case "${{ matrix.environment }}" in
            "sandbox")
              import_and_extract_fingerprint "${{ secrets.SANDBOX_PGP_PRIVATE_KEY }}" "${{ secrets.SANDBOX_PGP_PUBLIC_KEY }}"
              ;;
            "staging")
              import_and_extract_fingerprint "${{ secrets.STAGING_PGP_PRIVATE_KEY }}" "${{ secrets.STAGING_PGP_PUBLIC_KEY }}"
              ;;
            "production")
              import_and_extract_fingerprint "${{ secrets.PRODUCTION_PGP_PRIVATE_KEY }}" "${{ secrets.PRODUCTION_PGP_PUBLIC_KEY }}"
              ;;
            *)
              echo "::error ::Invalid secret category."
              exit 1
              ;;
          esac

      # Export AGE Key
      - name: Set COMMON_AGE_KEY
        run: |
          AGE_KEY_FILE="sops-age-key.txt"
          echo "${{ secrets.COMMON_AGE_KEY }}" > "$AGE_KEY_FILE"
          echo "SOPS_AGE_KEY_FILE=$AGE_KEY_FILE" >> $GITHUB_ENV

      - name: Configure Git for GPG
        run: |
          git config --global user.signingkey 9B0444DF26E34586
          git config --global commit.gpgsign true

      - name: Copy v2_sops.yaml
        run: cp -f configs/v2_sops.yaml .sops.yaml

      - name: Set up SSH Agent
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SVC_GIT_INFRA_READ_SSH_PRIVATE_KEY }}

      - name: Add GitHub.com to known hosts
        run: ssh-keyscan github.com >> ~/.ssh/known_hosts

      - name: Install sops
        run: |
          wget https://github.com/mozilla/sops/releases/download/v3.8.0/sops_3.8.0_amd64.deb
          sudo dpkg -i sops_3.8.0_amd64.deb

      - name: Verify sops installation
        run: sops --version

      # - name: Get All Changed Files
      #   id: files
      #   with:
      #     format: 'yaml'
      #   uses: jitterbit/get-changed-files@v1

      - name: Get changed files in the secrets folder
        id: files
        uses: tj-actions/changed-files@v42
        with:
          files: secrets/**/*.{yaml,yml}  # Targeting specific files in the secrets directory
          files_ignore: secrets/CODEOWNERS  # Ignoring the CODEOWNERS file in the secrets directory

      - name: Check for Relevant Changes
        id: check_changes
        run: |
          IFS=' ' read -r -a modified_files <<< "${{ steps.files.outputs.all_changed_files }}"
          relevant_changes="false"
          for file in "${modified_files[@]}"; do
            # Extract the folder name from the file path
            path_components=(${file//\// })
            folder_name=${path_components[2]}  # Adjust based on your directory structure

            if [[ $file == secrets/${{ matrix.environment }}/$folder_name/* ]]; then
              relevant_changes="true"
              break
            fi
          done
          echo "RELEVANT_CHANGES=$relevant_changes" >> $GITHUB_ENV

      # Set environment variables based on the matrix environment
      - if: env.RELEVANT_CHANGES == 'true'
        name: Set environment variables for ${{ matrix.environment }} environment
        run: |
          case ${{ matrix.environment }} in
            sandbox)
              VAULT_ADDR="${{ secrets.SANDBOX_VAULT_ADDR }}"
              VAULT_TOKEN="${{ secrets.SANDBOX_VAULT_TOKEN }}"
              ;;
            staging)
              VAULT_ADDR="${{ secrets.STAGING_VAULT_ADDR }}"
              VAULT_TOKEN="${{ secrets.STAGING_VAULT_TOKEN }}"
              ;;
            production)
              VAULT_ADDR="${{ secrets.PRODUCTION_VAULT_ADDR }}"
              VAULT_TOKEN="${{ secrets.PRODUCTION_VAULT_TOKEN }}"
              ;;
            *)
              echo "Unsupported environment: ${{ matrix.environment }}"
              exit 1
              ;;
          esac
          echo "VAULT_ADDR=$VAULT_ADDR" >> $GITHUB_ENV
          echo "VAULT_TOKEN=$VAULT_TOKEN" >> $GITHUB_ENV

      - if: env.RELEVANT_CHANGES == 'true'
        name: Decrypt Double-Dotted Secret Files
        run: |
          set -e
          IFS=' ' read -r -a modified_files <<< "${{ steps.files.outputs.all_changed_files }}"
          for file in "${modified_files[@]}"; do
            if [[ $(basename "$file") =~ \..+\.yaml$ ]]; then
              # Extract the folder name from the file path
              path_components=(${file//\// })
              folder_name=${path_components[2]}  # Adjust based on your directory structure

              decrypted_directory="secrets/${{ matrix.environment }}/$folder_name/decrypted"
              mkdir -p "$decrypted_directory"
              decrypted_file_path="$decrypted_directory/$(basename $file)"
              flag_file_path="$decrypted_directory/$(basename $file).decrypted"

              echo "Decrypting double-dot file: $file"
              if sops --config configs/v2_sops.yaml --decrypt $file > $decrypted_file_path; then
                # Create a flag file to indicate successful decryption
                touch "$flag_file_path"
              fi
            fi
          done

      - if: env.RELEVANT_CHANGES == 'true'
        name: Process Secret Files
        run: |
          set -e
          IFS=' ' read -r -a modified_files <<< "${{ steps.files.outputs.all_changed_files }}"
          for file in "${modified_files[@]}"; do
            if [[ $file == secrets/${{ matrix.environment }}/* ]]; then
              # Extract the folder name from the file path
              path_components=(${file//\// })
              folder_name=${path_components[2]}  # Adjust based on your directory structure

              decrypted_directory="secrets/${{ matrix.environment }}/$folder_name/decrypted"  # Update as needed
              decrypted_file_path="$decrypted_directory/$(basename $file)"
              flag_file_path="$decrypted_directory/$(basename $file).decrypted"

              if [[ -f "$flag_file_path" ]]; then
                # Process decrypted file
                echo "Processing decrypted file: $decrypted_file_path"

                # Convert YAML to JSON using yq
                pip install yq
                yq -r . "$decrypted_file_path" > temp.json
                # yq -r . "$decrypted_file_path" > "${decrypted_file_path%.yaml}.json"

                # Wrap the JSON output in {"data": { ... }}
                jq '{data: .}' temp.json > "${decrypted_file_path%.yaml}.json"

                # Debug output the contents of the JSON file for debugging
                # echo "Converted JSON content:"
                # cat "${decrypted_file_path%.yaml}.json"

                # Construct the Vault path
                filename_without_extension="$(basename $decrypted_file_path .yaml)"
                IFS='.' read -r secret_name sub_path <<< "$filename_without_extension"
                vault_path="secret-v2/data/$secret_name/$sub_path"
                echo "Uploading to Vault at path: $vault_path"

                # Upload to Vault
                curl -H "X-Vault-Token: $VAULT_TOKEN" \
                      -H "Content-Type: application/json" \
                      --request POST \
                      --data @"${decrypted_file_path%.yaml}.json" \
                      $VAULT_ADDR/v1/$vault_path
              else
                # File not decrypted, use sops publish
                echo "Publishing secret using sops for file: $file"
                sops publish -y $file
              fi
            fi
          done