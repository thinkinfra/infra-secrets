name: Create New Secret

on:
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'
        required: true
        default: 'warning'
        type: choice
        options:
          - info
          - warning
          - debug
      environment:
        description: 'Select Environment'
        required: true
        type: choice
        options:
          - production
          - staging
          - sandbox
      secret_category:
        description: 'Select Secret Category'
        required: true
        type: choice
        options:
          - customer-experience
          - infra
          - lending
      service:
        description: 'Name of the service (secret file name without extension)'
        required: true
      secret_type:
        description: 'Type of the secret (cert or singleline)'
        required: true
        default: 'singleline'
      secret_key:
        description: 'Secret key to add or update'
        required: true
      secret_value:
        description: 'Secret value for the key'
        required: true
      jira_ticket_id:
        description: 'JIRA Ticket ID'
        required: true
      sops_version:
        description: 'SOPS configuration version (v1 or v2)'
        required: true
        type: choice
        options:
          - v1
          - v2

jobs:
  modify-secret-file:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

        # Import Generic PGP Keys (Private and Public)
      - name: Import Generic PGP Keys
        run: |
          echo "Importing Generic PGP private key..."
          echo "${{ secrets.CI_PGP_PRIVATE_KEY }}" | gpg --batch --no-tty --import 2>&1
          echo "Importing Generic PGP public key..."
          echo "${{ secrets.CI_PGP_PUBLIC_KEY }}" | gpg --import 2>&1

      # Import PGP Private and Public Key based on secret_category and capture fingerprint
      - name: Import PGP Keys and Capture Fingerprint
        run: |
          import_and_extract_fingerprint() {
            PRIVATE_KEY="$1"
            PUBLIC_KEY="$2"
            echo "Importing PGP private key..."
            echo "$PRIVATE_KEY" | gpg --batch --no-tty --import 2>&1
            gpg_error=$?

            if [ $gpg_error -ne 0 ]; then
              echo "Failed to import PGP private key, error code: $gpg_error"
              exit $gpg_error
            fi

            echo "Importing PGP public key..."
            echo "$PUBLIC_KEY" | gpg --import 2>&1
            gpg_error=$?

            if [ $gpg_error -ne 0 ]; then
              echo "Failed to import PGP public key, error code: $gpg_error"
              exit $gpg_error
            fi

            echo "Listing imported keys..."
            gpg --list-keys
            gpg --list-secret-keys

            echo "Extracting fingerprint..."
            FINGERPRINT=$(gpg --list-secret-keys --with-colons | grep '^fpr' | head -n 1 | cut -d':' -f10)

            if [ -z "$FINGERPRINT" ]; then
              echo "Failed to extract fingerprint"
              exit 1
            fi

            echo "Fingerprint extracted: $FINGERPRINT"
            echo "FINGERPRINT=$FINGERPRINT" >> $GITHUB_ENV
          }

          case "${{ github.event.inputs.secret_category }}" in
            "lending")
              import_and_extract_fingerprint "${{ secrets.LENDING_PGP_PRIVATE_KEY }}" "${{ secrets.LENDING_PGP_PUBLIC_KEY }}"
              ;;
            "infra")
              import_and_extract_fingerprint "${{ secrets.INFRA_PGP_PRIVATE_KEY }}" "${{ secrets.INFRA_PGP_PUBLIC_KEY }}"
              ;;
            "customer-experience")
              import_and_extract_fingerprint "${{ secrets.CE_PGP_PRIVATE_KEY }}" "${{ secrets.CE_PGP_PUBLIC_KEY }}"
              ;;
            *)
              echo "::error ::Invalid secret category."
              exit 1
              ;;
          esac

      # Export AGE Key based on secret_category and set SOPS_AGE_KEY_FILE
      - name: Export AGE Key and Set SOPS_AGE_KEY_FILE
        run: |
          export_age_key() {
            AGE_KEY="$1"
            AGE_KEY_FILE="$2"
            echo "$AGE_KEY" > "$AGE_KEY_FILE"
            echo "SOPS_AGE_KEY_FILE=$AGE_KEY_FILE" >> $GITHUB_ENV
          }

          case "${{ github.event.inputs.secret_category }}" in
            "lending")
              export_age_key "${{ secrets.LENDING_AGE_KEY }}" "lending-age-key.txt"
              ;;
            "infra")
              export_age_key "${{ secrets.INFRA_AGE_KEY }}" "infra-age-key.txt"
              ;;
            "customer-experience")
              export_age_key "${{ secrets.CE_AGE_KEY }}" "ce-age-key.txt"
              ;;
            *)
              echo "::error ::Invalid secret category."
              exit 1
              ;;
          esac

      - name: Install sops
        run: |
          wget https://github.com/mozilla/sops/releases/download/v3.7.1/sops_3.7.1_amd64.deb
          sudo dpkg -i sops_3.7.1_amd64.deb

      - name: Handle Secret Value
        run: |
          INP_SECRET_VALUE=$(jq -r '.inputs.secret_value' $GITHUB_EVENT_PATH)
          echo "::add-mask::$INP_SECRET_VALUE"
          echo SECRET_VALUE="$INP_SECRET_VALUE" >> $GITHUB_ENV

      - name: Define Secret File Path
        run: |
          echo "SECRET_FILE_PATH=secrets/${{ github.event.inputs.environment }}/${{ github.event.inputs.secret_category }}/${{ github.event.inputs.service }}.yaml" >> $GITHUB_ENV

      - name: Check if Secret File Exists
        run: |
          if [ ! -f "${{ env.SECRET_FILE_PATH }}" ]; then
            echo "::error ::Secret file does not exist or path is incorrect."
            exit 1
          fi

      - name: Define Temporary Decrypted File Path
        run: |
          DECRYPTED_FILE_PATH="$(dirname ${{ env.SECRET_FILE_PATH }})/temp_decrypted_file.yaml"
          echo "DECRYPTED_FILE_PATH=$DECRYPTED_FILE_PATH" >> $GITHUB_ENV

      - name: Decrypt Secret File
        run: |
          sops --config configs/${{ github.event.inputs.sops_version }}_sops.yaml --decrypt "${{ env.SECRET_FILE_PATH }}" > "${{ env.DECRYPTED_FILE_PATH }}"

      - name: Update Secret File Based on Secret Type
        run: |
          if [ "${{ github.event.inputs.secret_type }}" == "cert" ]; then
            # Decode base64 for certificate and append as a multi-line string with indentation
            echo "${{ github.event.inputs.secret_key }}: |" >> "${{ env.DECRYPTED_FILE_PATH }}"
            echo "${{ env.SECRET_VALUE }}" | base64 --decode | sed 's/^/    /' >> "${{ env.DECRYPTED_FILE_PATH }}"
          else
            # Handle as a regular single-line secret
            SECRET_VALUE=$(echo "${{ env.SECRET_VALUE }}")
            echo "${{ github.event.inputs.secret_key }}: $SECRET_VALUE" >> "${{ env.DECRYPTED_FILE_PATH }}"
          fi

      - name: Re-Encrypt Secret File
        run: |
          sops --config configs/${{ github.event.inputs.sops_version }}_sops.yaml --encrypt "${{ env.DECRYPTED_FILE_PATH }}" > "${{ env.SECRET_FILE_PATH }}"

      # Step to delete the existing branch if it exists
      - name: Delete Existing Branch
        run: |
          BRANCH="new-secret/${{ github.event.inputs.service }}/${{ github.event.inputs.jira_ticket_id }}"
          if git ls-remote --heads origin $BRANCH; then
            git push origin --delete $BRANCH
          fi

      # Step to commit the changes
      - name: Commit and Push Changes
        run: |
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'actions@github.com'
          git checkout -b "new-secret/${{ github.event.inputs.service }}/${{ github.event.inputs.jira_ticket_id }}"
          git add "${{ env.SECRET_FILE_PATH }}"
          git commit -m "Update secret for ${{ github.event.inputs.service }} related to JIRA ${{ github.event.inputs.jira_ticket_id }}"
          git push origin "new-secret/${{ github.event.inputs.service }}/${{ github.event.inputs.jira_ticket_id }}"

      # Step to create a Pull Request using GitHub CLI
      - name: Create Pull Request
        run: |
          gh pr create --title "New Secret: ${{ github.event.inputs.service }} for JIRA ${{ github.event.inputs.jira_ticket_id }}" \
                  --body "Updating secrets for ${{ github.event.inputs.service }} related to JIRA ${{ github.event.inputs.jira_ticket_id }}" \
                  --base main \
                  --head "new-secret/${{ github.event.inputs.service }}/${{ github.event.inputs.jira_ticket_id }}" \
                  --label "automated-pr"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Cleanup
        run: |
          rm -f "${{ env.DECRYPTED_FILE_PATH }}"
          gpg --delete-secret-keys --batch --yes ${{ env.FINGERPRINT }}
          rm -f "$SECRET_TEMP_FILE"
          rm -f age_key.txt

          # Additional steps to commit changes, if necessary