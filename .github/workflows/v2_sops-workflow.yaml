name: v2 Sops Publish

on:
  push:
    branches:
      - "gh-action/update-workflow/INF-96991"
    paths:
      - "secrets/**"
  workflow_dispatch:

jobs:
  v1_secret_vault:
    name: "v1 Secret Injection via Sops"
    strategy:
      matrix:
        environment: [sandbox, staging, production]
      fail-fast: false
    runs-on: self-hosted-${{ matrix.environment }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Import Generic PGP Keys (Private and Public)
      - name: Import Generic PGP Keys
        run: |
          echo "Importing Generic PGP private key..."
          echo "${{ secrets.CI_PGP_PRIVATE_KEY }}" | gpg --batch --no-tty --import
          echo "Importing Generic PGP public key..."
          echo "${{ secrets.CI_PGP_PUBLIC_KEY }}" | gpg --import

      # Export AGE Key
      - name: Set COMMON_AGE_KEY
        run: echo "COMMON_AGE_KEY=${{ secrets.COMMON_AGE_KEY }}" >> $GITHUB_ENV

      - name: Copy v1_sops.yaml
        run: cp -f configs/v1_sops.yaml .sops.yaml

      - name: Sops Binary Installer
        uses: mdgreenwald/mozilla-sops-action@v1.5.0
        with:
          version: latest

      - name: Get All Changed Files
        id: files
        uses: jitterbit/get-changed-files@v1

      - name: Check for Relevant Changes
        id: check_changes
        run: |
          IFS=' ' read -r -a modified_files <<< "${{ steps.files.outputs.added_modified }}"
          relevant_changes="false"
          for file in "${modified_files[@]}"; do
            if [[ $file == secrets/${{ matrix.environment }}/lending/* ]]; then
              relevant_changes="true"
              break
            fi
          done
          echo "RELEVANT_CHANGES=$relevant_changes" >> $GITHUB_ENV

      # Set environment variables based on the matrix environment
      # - if: env.RELEVANT_CHANGES == 'true'
      #   name: Set environment variables
      #   run: |
      #     VAULT_ADDR="${{ secrets[env.matrix.environment + '_VAULT_ADDR'] }}"
      #     VAULT_TOKEN="${{ secrets[env.matrix.environment + '_VAULT_TOKEN'] }}"
      #     echo "VAULT_ADDR=$VAULT_ADDR" >> $GITHUB_ENV
      #     echo "VAULT_TOKEN=$VAULT_TOKEN" >> $GITHUB_ENV
      - if: env.RELEVANT_CHANGES == 'true'
        name: Set environment variables
        run: |
          VAULT_ADDR="${{ secrets[format('{0}_VAULT_ADDR', matrix.environment)] }}"
          VAULT_TOKEN="${{ secrets[format('{0}_VAULT_TOKEN', matrix.environment)] }}"
          echo "VAULT_ADDR=$VAULT_ADDR" >> $GITHUB_ENV
          echo "VAULT_TOKEN=$VAULT_TOKEN" >> $GITHUB_ENV

      # - if: env.RELEVANT_CHANGES == 'true'
      #   name: Define Decrypted File Path
      #   run: |
      #     echo "DECRYPTED_PATH=./decrypted" >> $GITHUB_ENV
      #     mkdir -p ${{ env.DECRYPTED_PATH }}

      - if: env.RELEVANT_CHANGES == 'true'
        name: Define Decrypted File Path
        run: |
          DECRYPTED_PATH="./decrypted"
          echo "DECRYPTED_PATH=$DECRYPTED_PATH" >> $GITHUB_ENV
          mkdir -p $DECRYPTED_PATH

      # - if: env.RELEVANT_CHANGES == 'true'
      #   name: Process Secret Files
      #   run: |
      #     set -e
      #     IFS=' ' read -r -a modified_files <<< "${{ steps.files.outputs.added_modified }}"
      #     for file in "${modified_files[@]}"; do
      #       if [[ $file =~ ^secrets/${{ matrix.environment }}/lending/.+\.\.yaml$ ]]; then
      #         decrypted_file_path="${{ env.DECRYPTED_PATH }}/$(basename $file)"
      #         echo "Decrypting double-dot file: $file"
      #         sops -d $file > $decrypted_file_path

      #         # Convert YAML to JSON
      #         pip install yq
      #         yq eval -o=json "$decrypted_file_path" > decrypted-file.json

      #         # Construct and upload to Vault
      #         secret_name="${filename%%.*}"
      #         sub_path="${filename%.*}"
      #         sub_path="${sub_path#*.}"
      #         vault_path="secret/data/$secret_name/$sub_path"
      #         curl -H "X-Vault-Token: $VAULT_TOKEN" \
      #             -H "Content-Type: application/json" \
      #             --request POST \
      #             --data @decrypted-file.json \
      #             $VAULT_ADDR/v1/$vault_path
      #       else
      #         echo "Publishing secret using sops for file: $file"
      #         sops publish -y "secrets/${{ matrix.environment }}/lending/$file"
      #       fi
      #     done

      - if: env.RELEVANT_CHANGES == 'true'
        name: Process Secret Files
        run: |
          set -e
          IFS=' ' read -r -a modified_files <<< "${{ steps.files.outputs.added_modified }}"
          for file in "${modified_files[@]}"; do
            # Adjusted file path to ensure no duplication
            file_path="secrets/${{ matrix.environment }}/lending/$file"

            if [[ $file_path =~ .+\.\.yaml$ ]]; then
              decrypted_file_path="${{ env.DECRYPTED_PATH }}/$(basename $file_path)"
              echo "Decrypting double-dot file: $file_path"
              sops -d $file_path > $decrypted_file_path

              # Convert YAML to JSON
              pip install yq
              yq eval -o=json "$decrypted_file_path" > decrypted-file.json

              # Construct and upload to Vault
              secret_name="$(basename $file_path .yaml)"
              secret_name="${secret_name%%.*}"
              sub_path="${secret_name#*.}"
              vault_path="secret/data/$sub_path"
              curl -H "X-Vault-Token: $VAULT_TOKEN" \
                  -H "Content-Type: application/json" \
                  --request POST \
                  --data @decrypted-file.json \
                  $VAULT_ADDR/v1/$vault_path
            else
              echo "Publishing secret using sops for file: $file_path"
              sops publish -y $file_path
            fi
          done
