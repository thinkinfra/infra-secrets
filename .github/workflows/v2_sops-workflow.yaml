name: v2 Sops Publish

on:
  push:
    branches:
      - "gh-action/update-workflow/INF-96991"
    paths:
      - "secrets/**"
  workflow_dispatch:

jobs:
  v1_secret_vault:
    name: "v1 Secret Injection via Sops"
    strategy:
      matrix:
        environment: [sandbox, staging, production]
      fail-fast: false
    runs-on: self-hosted-${{ matrix.environment }}
    environment: ${{ matrix.environment }} #no longer required

    steps:
      - name: Clean up working directory
        run: rm -rf ./*

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install GPG
        run: |
          gpg --version
          sudo apt-get update
          sudo apt-get install -y gnupg

      # Import Generic PGP Keys (Private and Public)
      - name: Import Generic PGP Keys
        run: |
          gpg --version
          echo "Importing Generic PGP private key..."
          echo "${{ secrets.CI_PGP_PRIVATE_KEY }}" | gpg --batch --no-tty --import 2>&1
          echo "Importing Generic PGP public key..."
          echo "${{ secrets.CI_PGP_PUBLIC_KEY }}" | gpg --import 2>&1

      - name: Capture PGP Fingerprint
        run: |
          echo "Extracting fingerprint..."
          FINGERPRINT=$(gpg --list-secret-keys --with-colons | grep '^fpr' | head -n 1 | cut -d':' -f10)

          if [ -z "$FINGERPRINT" ]; then
            echo "Failed to extract fingerprint"
            exit 1
          fi

          echo "Fingerprint extracted: $FINGERPRINT"
          echo "FINGERPRINT=$FINGERPRINT" >> $GITHUB_ENV

      - name: Use Fingerprint in Another Step
        run: |
          echo "The captured fingerprint is $FINGERPRINT"

      # Export AGE Key
      - name: Set COMMON_AGE_KEY
        run: |
          AGE_KEY_FILE="sops-age-key.txt"
          echo "${{ secrets.COMMON_AGE_KEY }}" > "$AGE_KEY_FILE"
          echo "SOPS_AGE_KEY_FILE=$AGE_KEY_FILE" >> $GITHUB_ENV

      - name: Copy v1_sops.yaml
        run: cp -f configs/v1_sops.yaml .sops.yaml


      - name: Install sops
        run: |
          wget https://github.com/mozilla/sops/releases/download/v3.7.1/sops_3.7.1_amd64.deb
          sudo dpkg -i sops_3.7.1_amd64.deb

      # - name: Install sops
      #   run: |
      #     wget https://github.com/mozilla/sops/releases/download/v3.8.0/sops_3.8.0_amd64.deb
      #     sudo dpkg -i sops_3.8.0_amd64.deb
      # - name: Sops Binary Installer
      #   uses: mdgreenwald/mozilla-sops-action@v1.5.0
      #   with:
      #     version: latest # default is latest stable

      - name: Verify sops installation
        run: sops --version

      - name: Get All Changed Files
        id: files
        uses: jitterbit/get-changed-files@v1

      - name: Check for Relevant Changes
        id: check_changes
        run: |
          IFS=' ' read -r -a modified_files <<< "${{ steps.files.outputs.added_modified }}"
          relevant_changes="false"
          for file in "${modified_files[@]}"; do
            if [[ $file == secrets/${{ matrix.environment }}/lending/* ]]; then
              relevant_changes="true"
              break
            fi
          done
          echo "RELEVANT_CHANGES=$relevant_changes" >> $GITHUB_ENV

      # Set environment variables based on the matrix environment
      - if: env.RELEVANT_CHANGES == 'true'
        name: Set environment variables for ${{ matrix.environment }} environment
        run: |
          case ${{ matrix.environment }} in
            sandbox)
              VAULT_ADDR="${{ secrets.SANDBOX_VAULT_ADDR }}"
              VAULT_TOKEN="${{ secrets.SANDBOX_VAULT_TOKEN }}"
              ;;
            staging)
              VAULT_ADDR="${{ secrets.STAGING_VAULT_ADDR }}"
              VAULT_TOKEN="${{ secrets.STAGING_VAULT_TOKEN }}"
              ;;
            production)
              VAULT_ADDR="${{ secrets.PRODUCTION_VAULT_ADDR }}"
              VAULT_TOKEN="${{ secrets.PRODUCTION_VAULT_TOKEN }}"
              ;;
            *)
              echo "Unsupported environment: ${{ matrix.environment }}"
              exit 1
              ;;
          esac
          echo "VAULT_ADDR=$VAULT_ADDR" >> $GITHUB_ENV
          echo "VAULT_TOKEN=$VAULT_TOKEN" >> $GITHUB_ENV

      - if: env.RELEVANT_CHANGES == 'true'
        name: Decrypt Double-Dotted Secret Files
        run: |
          set -e
          IFS=' ' read -r -a modified_files <<< "${{ steps.files.outputs.added_modified }}"
          for file in "${modified_files[@]}"; do
            if [[ $(basename "$file") =~ \..+\.yaml$ ]]; then
              decrypted_directory="secrets/${{ matrix.environment }}/lending/decrypted"
              mkdir -p "$decrypted_directory"
              decrypted_file_path="$decrypted_directory/$(basename $file)"
              touch "$decrypted_file_path"

              echo "Decrypting double-dot file: $file"
              sops --verbose -d $file > $decrypted_file_path || echo "Decryption error, might continue if threshold is met"
            fi
          done
          # Debug: Check the contents of the decrypted YAML file
          echo "Decrypted YAML content:"
          cat "$decrypted_file_path"

      - if: env.RELEVANT_CHANGES == 'true'
        name: Process Decrypted Secret Files
        run: |
          set -e
          decrypted_directory="secrets/${{ matrix.environment }}/lending/decrypted"
          for decrypted_file in "$decrypted_directory"/*.yaml; do
            if [ -s "$decrypted_file" ]; then
              echo "Processing decrypted file: $decrypted_file"

              # Convert YAML to JSON using yq
              pip install yq
              yq -r . "$decrypted_file" > "${decrypted_file%.yaml}.json"

              # Output the contents of the JSON file for debugging
              echo "Converted JSON content:"
              cat "${decrypted_file%.yaml}.json"

              # Construct the Vault path
              filename_without_extension="$(basename $decrypted_file .yaml)"
              IFS='.' read -r secret_name sub_path <<< "$filename_without_extension"
              vault_path="secret/data/$secret_name/$sub_path"
              echo "Uploading to Vault at path: $vault_path"

              # Upload to Vault
              curl -H "X-Vault-Token: $VAULT_TOKEN" \
                    -H "Content-Type: application/json" \
                    --request POST \
                    --data @"${decrypted_file%.yaml}.json" \
                    $VAULT_ADDR/v1/$vault_path
            else
              echo "Skipped processing empty or non-existent file: $decrypted_file"
            fi
          done
